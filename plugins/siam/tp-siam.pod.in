=head1 SIAM plugin for Torrus


=head2 Installation

Follow the Torrus installation guide for the main software installation.

Install the SIAM Perl module from CPAN:

  perl -MCPAN -e 'install SIAM'

Unpack the plugin distribution package in some directory:

  gzip -dc tp-siam-1.X.tar.gz | tar xvf -

Then run the Torrus plugin installation utility, pointing to the
unpacked plugin directory:

  torrus install_plugin tp-siam-1.X


=head2 Overview

Service Inventory Abstraction Model (SIAM) is a Perl library
available at CPAN. It is designed to be an abstraction interface between
enterprise-specific inventory database and various programs, such as
Torrus. SIAM is supposed to be used with an enterprise-specific driver
which maps the inventory data into SIAM objects and attributes.

The C<tp-siam> plugin consists of command-line utilities and a
DevDiscover module.


=head2 siam_genddx utility

The C<siam_genddx> command-line utility performs the following steps:

=over 4

=item * Retrieve the SNMP devices matching the C<torrus.server> attribute;

=item * Create discovery instruction (DDX) files for each Torrus tree
as found in SIAM data.

=back

Command-line arguments:

  torrus siam_genddx [options...]

    Options:
     --server=HOSTNAME       Torrus server to match in SIAM
     --pddx=PATH             Path to store DDX files
     --pbundles=PATH         Path to store bundles XML
     --pnodes=PATH           Path to store per-node XML
     --prrd=PATH             RRD data storage path
     --verbose               print extra information
     --debug                 print debugging information

By default, the local server's hostname is matched against the
C<torrus.server> attribute. The resulting DDX files are stored in the
default I<discovery> directory. The DDX files are named as
"siam-I<TREE>.ddx" for each given tree name supplied by SIAM
parameters. The DDX files would store the generated bundle files in
I<xmlconfig/bundles/>, and device-specific XML files in
I<xmlconfig/nodes/> subdirectories of the standard XML configuration
location. 


The file C<siam-config.pl> defines all default values and DDX
parameters. These values can be modified in your site-specific
F<siam-siteconfig.pl>.



=head2 siam_genxml utility

C<siam_genxml> reads the SIAM data, and takes all SIAM::Service
objects having the C<siam.svc.type> attribute set to
C<TrafficAggregate>. For those services matching the C<torrus.server>
attribute, it creates Torrus configuration XML files that present total
aggregate traffic from several IF-MIB interfaces.

Command-line arguments:

  torrus siam_genxml [options...]
  Options:
    --server=HOSTNAME       Torrus server to match in SIAM
    --paggr=PATH            Path to store aggregates XML
    --verbose               print extra information
    --debug                 print debugging information

The traffic aggregate XML files are stored by default in
I<xmlconfig/bundles/>.




=head2 Torrus::DevDiscover::SIAMDD module

The discovery module C<Torrus::DevDiscover::SIAMDD> tries to match the
IF-MIB interface names in SIAM against those on the network devices. The
resulting configuration contains I<nodeid> values imported from SIAM and
assigned to corresponding device interfaces. As a result, external
programs can fetch Torrus data by using the enterprise-specific service
identifiers.



=head2 siam_rrd_fetch utility

C<siam_rrd_fetch> retrieves a list of devices and their corresponding
service data elements, and then retrieves the aggregated data from RRD
files. The aggregated data is returned to SIAM via a condition
"torrus.fetch.data" on the SIAM::ServiceDataElement objects.

Usage:
  
  torrus siam_rrdfetch [options...]

  Options:
    --server=HOSTNAME       Torrus server to match in SIAM
    --verbose               print extra information
    --debug                 print debugging information




=head2 SIAM Attributes

SIAM::Device object attributes used by the plugin:

=over 4

=item * siam.object.complete

Only complete device objects are processed. The incomplete devices are ignored.

=item * torrus.server

This attribute is matched when the SIAM command-line utility imports the
devicesinto the DDX files.

=item * torrus.tree

The Torrus tree name. It should match an existing tree name in Torrus
configuration.

=item * siam.device.name

Unique device name which is used for C<sustem-id> parameter in Torrus.

=item * siam.device.inventory_id

Unique device identifier that is used to retrieve the corresponding
SIAM::Device object from SIAM.

=item * snmp.managed

Must return a true value in order for the device to be included in
further processing.

=item * snmp.host, snmp-version, snmp-community, snmp-timeout, snmp-retries

Optional attributes that may override the default values.

=item * torrus.subtree-path

Optional attribute, identifies the subtree name where the device node is
placed.

=back



SIAM::ServiceUnit object attributes used by the discovery module:

=over 4

=item * siam.object.complete

Only complete service unit objects are processed. The incomplete ones
are ignored.

=item * siam.svcunit.type

Type of service unit. Supported value: C<IFMIB.Port>

=item * torrus.port.name, torrus.port.shortname

These attributes are matched against the IF-MIB interface names in order
to find the corresponding ifIndex. This list can be modified in
I<siam-siteconfig.pl>.

=item * torrus.port.nodeid

Unique value of C<nodeid> which will be assigned to the matched interface.

=item * torrus.port.bandwidth

Optional service bandwidth in bit per second. If defined, the
corresponding bandwidth limit parameters are applied to the interface
configuration.

=back



SIAM::Service attributes used for traffic aggregate graphs:

=over 4

=item * siam.object.complete

Only complete service objects are processed. The incomplete ones are ignored.

=item * siam.svc.type

By default, only service object with C<siam.svc.type> set to
C<TrafficAggregate> are treated as traffic aggregation services. Other
values can be configured in F<siam-siteconfig.pl>.

=item * torrus.aggregate.name

Human-readable name for the aggregate. It is used as a subtree name in
Torrus tree.

=item * torrus.aggregate.nodeid

The value of this parameter is used as the base for NodeID for the
aggregate leafs.

=item * torrus.aggregate.description

[Optional] human-readable description of the aggregate.

=back



SIAM::ServiceUnit attributes used in traffic aggregates:

=over 4

=item * siam.svcunit.type

Only C<IFMIB.Port> is supported.

=item * torrus.port.nodeid

Port NodeID values are used to compose the aggregate graphs.

=item * siam.svcunit.name

The value is used to build the legend text for the aggregate.

=back



SIAM::ServiceDataElement attributes used by siam_rrdfetch:

=over 4

=item * siam.svcdata.driver

Only data elements with the driver set to 'Torrus.TimeSeries' are processed.

=item * torrus.nodeid

NodeID prefix -- all leaf nodes which match this prefix are collected
for this data element object.

=item * torrus.fetch.max_intervals

(Optional) maximum number of aggregation intervals to retrieve. Default: 14.

=item * torrus.fetch.aggr_interval

(Optional) aggregation interval. Default: 86400 (24 hours).

=back


SIAM::ServiceDataElement computable 'torrus.fetch.latest_available' is
used to determine the UNIX timestamp of the latest data already fetched
in a previous run.



=head2 SIAM conditions

Conditions are used for sending the SNMP discovery status events back
into the SIAM driver. They can be used for diagnostics and reporting
purposes.

=over 4

=item torrus.imported

This condition is applied to SIAM::Device and SIAM::ServiceUnit
objects. The value is a status code and a status message separated by
semicolon (;). Non-zero status code corresponds to success, and no
status message is given. Zero status code indicates an error, and the
status message explains the details.

=item torrus.warning

The condition is applied to SIAM::ServiceUnit in case of non-critical
problems. The supplied value is a message string with the warning
message.

=item torrus.fetch.data

This condition is set by siam_rrdfetch on SIAM::ServiceDataElement objects.
It contains a hashref with the retrieved data:
timestamp->counter->CF->value

=back




=head1 Author

Copyright (c) 2011 Stanislav Sinyagin E<lt>ssinyagin@yahoo.comE<gt>
