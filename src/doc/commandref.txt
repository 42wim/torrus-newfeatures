Torrus Command Reference
  acledit
    Usage:

        $Torrus_HOME/bin/acledit --help
        Usage: /usr/local/torrus-0.1/bin/acledit [options...]
        Group Options:
          --addgroup=GROUP        add group
          --delgroup=GROUP        delete group
          --modgroup=GROUP        modify group
          --permit=DisplayTree    add privilege to group(s)
          --deny=DisplayTree      revoke privilege from group(s)
          --for=TREE              subject of privilege or '*'
          --showgroup=GROUP       display group details
        User Options:
          --adduser=UID           add new user
          --deluser=UID           delete user
          --moduser=UID           modify user
          --addtogroup=GROUP      add user to group(s)
          --delfromgroup=GROUP    delete user from group(s)
          --password=PASSWORD     set the user password
          --cn="John Smith"       set the user common name
          --showuser=USER         display user details
        General Options:
          --export=FILE           export ACL config to a file
          --template=NAME         [aclexport.xml] export template
          --import=FILE           import ACL config from a file
          --clear                 delete ALL user and privileges configuration
          --list                  list all users and groups they belong to
          --debug                 set the log level to debug
          --verbose               set the log level to info
          --help                  this help message

    Manages the access control lists. Each user is identified by user ID,
    and has a set of attributes. Currently supported atributes are "cn"
    (common name) and userPasswordMD5 (MD5 digest of the user's password).

    Each user belongs to one or several groups. Each group has its own set
    of privileges. A privilege is identified by privilege name and object
    name. Currently only one privilege name is supported: "DisplayTree", and
    the object name is the name of the tree that this group is allowed to
    browse. The asterisk (*) instead of the object name allows the privilege
    for all objects.

    User authorization in the web interface is controlled by
    $Torrus::ApacheHandler::authorizeUsers in torrus-siteconfig.pl.

  action_printemail
    Usage:

      <action name="report-email">
        <param name="action-type" value="exec" />
        <param name="command">
          $Torrus_HOME/bin/action_printemail | mail alarms@xyz.net
        </param>
        <param name="launch-when" value="set, clear" />
      </action>

    This program is designed for usage from a monitor action only. It takes
    the arguments from environment variables, as described in action-type
    "exec" in *Torrus XML Configuration Guide*.

    Site-specific variables must be specified in the file
    $Torrus_HOME/share/torrus/email-siteconfig.pl. Default values are installed
    by the first run of "make install". Subsequent runs of "make install" do
    not override this file.

    In addition, these values may be specified via command-line arguments:

      --url grapher-url
      --template template-file

    The template file must be resided in $Torrus_HOME/share/torrus/templates/
    directory. This is a Template-toolkit file, with the following variables
    defined:

        tree       Tree name
        token      Leaf token
        path       Leaf path
        url        URL for browsing this leaf
        ncomment   This leaf comment
        npcomment  Leaf's parent comment
        event      Event type
        monitor    Monitor name
        mcomment   Monitor comment
        timestamp  Time and date of the event
        env(VAR)   Environment variable VAR

  action_snmptrap
    Usage:

      <action name="snmptrap">
        <param name="action-type" value="exec" />
        <param name="command" value="$Torrus_HOME/bin/action_snmptrap" />
        <param name="launch-when" value="set, clear" />
      </action>

    This program is designed for usage from a monitor action only. It takes
    the arguments from environment variables, as described in action-type
    "exec" in *Torrus XML Configuration Guide*.

    Site-specific variables must be specified in the file
    $Torrus_HOME/share/torrus/snmptrap-siteconfig.pl. Default values are
    installed by the first run of "make install". Subsequent runs of "make
    install" do not override this file.

    In addition, these values may be specified via command-line arguments:

      --host        hostname
      --community   community-string
      --port        UDP port
      --enterprise  OID

  clearcache
    Usage:

      $Torrus_HOME/bin/clearcache

    Debugging purposes only. This program clears the renderer's cache.

  collector
    Usage:

      $Torrus_HOME/bin/collector --tree=NAME [options]
      Options:
         --tree=NAME     tree name
         --nodaemon      do not fork daemon and log to STDERR
         --runonce       run one time and exit. Implies --nodaemon
         --debug         set the log level to debug
         --verbose       set the log level to info
         --help          help message

    By default, the process forks into a daemon, sets the log output to
    $Torrus_HOME/var/log/collector.NAME.log, performs one Collector cycle, and
    sleeps till the next cycle scheduled.

    In daemon mode, the log file is reopened by SIGHUP signal.

    Collector cycles scheduling is controlled by two parameters defined for
    each individual configuration leaf: "collector-period" and
    "collector-timeoffset". See the configuration guide for more details.

    The number of OID variable bindings sent by collector is controlled by
    the datasource parameter "snmp-oids-per-pdu". It is set by default to 40
    in snmp-defs.xml, and may be overwritten at the host level.

  compilexml
    Usage:

      $Torrus_HOME/bin/compilexml --tree=NAME [options...]
      Options:
        --tree=NAME     tree name(s) to compile
        --all           compile all trees
        --nods          compile non-datasource configuration only
        --noval         disable parameter validation
        --debug         set the log level to debug
        --verbose       set the log level to info
        --help          this help message

    Performs the XML configuration re-compilation.

    It does not require any other processes to be restarted. Renderer's
    cache is automatically flushed on the next Renderer's run. Monitor
    automatically resets on the next monitoring cycle. All tokensets in the
    given tree become empty.

    The option "--noval" disables all validation. This speeds up the
    compilation up to 2 times, but it adds the risk of getting unusable
    configuration. In addition, the first initialisation cycle of collector
    and monitor would be much longer.

  configinfo
    Usage:

      $Torrus_HOME/bin/configinfo

    Prints useful statistics information about every tree.

  configsnapshot
    Usage:

      $Torrus_HOME/bin/configsnapshot --tree=NAME [options...]
      Options:
        --tree=NAME     tree name
        --out=filename  output file [snapshot.xml]
        --verbose       print extra information
        --help          this help message

    Generates configuration snapshot from current datasources tree. The
    output is an XML file ready for compilation, and it represents the whole
    tree datasources, monitors, and tokensets. The snapshot does not include
    view definitions. Templates and file patterns are expanded inside the
    file. It does not require any other XML configuration files, except for
    defaults.xml and your custom view definitions.

    Warning: "configsnapshot" from Torrus release 0.1.5 will not work
    correctly with databases from previous releases. Use release "0.1.4bf2"
    instead. "configsnapshot" utility from release 0.1.4bf2 does not
    preserve aliases.

    This utility is useful in Torrus upgrade process. In case when RRD files
    structure is changing in Torrus default templates, and the user's demand
    is to preserve the historical data, the following steps could be done:

    *   Stop the collector and monitor processes.

    *   Install newest Torrus software and do not run "compilexml"
        immediately.

    *   Create snapshots of the trees that you want to preserve for
        historical reasons:

          ./bin/configsnapshot --tree=myrouters \
            --out=share/xmlconfig/myrouters-snapshot.xml

    *   If needed, move the existing RRD files into different directory.
        Then change the "data-dir" parameters in the snapshot XML
        accordingly.

    *   Create a new tree with only the snapshot file in it. Compile the
        tree.

    *   At this stage, it is up to the user to decide wether to continue
        running the collector and monitor daemons for this new tree. The old
        data may be preserved for historical reference, and collector may be
        run with the newest tree structure and definitions.

  devdiscover
    Performs SNMP discovery and generates Torrus XML configuration file. See
    *Torrus SNMP Discovery User Guide* for details.

  genddx
    Generates SNMP discovery instructions file for "devdiscover". See *Torrus
    SNMP Discovery User Guide* for details.

  monitor
    Usage:

      $Torrus_HOME/bin/monitor --tree=NAME [options]
      Options:
         --tree=NAME     tree name
         --nodaemon      do not fork daemon and log to STDERR
         --runonce       run one time and exit. Implies --nodaemon
         --debug         set the log level to debug
         --verbose       set the log level to info
         --help          help message

    By default, the process forks into a daemon, sets the log output to
    $Torrus_HOME/var/log/monitor.NAME.log, performs one monitoring cycle, and
    sleeps till the next cycle scheduled.

    In daemon mode, the log file is reopened by SIGHUP signal.

    Monitoring cycles scheduling is controlled by two parameters defined in
    $Torrus_HOME/share/torrus/torrus-siteconfig.pl:

      # Period of Monitor runs, in seconds
      $Torrus::Global::monitorPeriod = 300;

      # Monitor will run at "time() mod Period + Shift", thus allowing the
      # data to be updated during the shift period
      $Torrus::Global::monitorStartShift = 15;

  schedulerinfo
    Usage:

      $Torrus_HOME/bin/schedulerinfo --tree=NAME [options...]
      Options:
        --tree=NAME     tree name
        --config        report scheduler configuration
        --runtime       report scheduler runtime statistics
        --help          this help message

    This utility is useful in scheduler planning and analysis. It prints
    extended scheduler tasks information to standard output.

Author
    Copyright (c) 2002-2003 Stanislav Sinyagin <ssinyagin@yahoo.com>

